; Saffron ABNF grammar
; ====================

saffron = ws [ key-value ws ] [ comment ] *( newline ws [ key-value ws ] [ comment ] )

; Key-value pairs
; ---------------

key-value = key ws-char ws value

key = key-start *key-char
key-start = %x5f                ; _
key-start =/ ALPHA
key-char = key-start
key-char =/ DIGIT

value = bool
value =/ number
value =/ string
value =/ vector
value =/ map

; Whitespace and comments
; -----------------------

newline = [ %x0d ] %x0a         ; \r \n

ws = *ws-char
ws-char = %x09                  ; \t
ws-char =/ %x20                 ; Space

comment = comment-start *comment-char
comment-start = %x23            ; #
comment-char = %x09             ; \t
comment-char =/ %x20-10ffff

; Booleans
; --------

bool = %x74.72.75.65            ; true
bool =/ %x66.61.6c.73.65        ; false

; Numbers
; -------

number = [ minus ] int [ frac ]
int = zero / ( non-zero *DIGIT )
frac = period 1*DIGIT [ f ]

minus = %x2d                    ; -
period = %x2e                   ; .
zero = %x30                     ; 0
non-zero = %x31-39              ; 1 - 9
f = %x46 / %x66                 ; F / f

; Strings
; -------

string = %x22 *string-char %x22    ; "
string-char = unescaped / escaped

unescaped = %x20-21 / %x23-5b / %x5d-10ffff
escaped = %x5c escape-char      ; \

escape-char = %x22              ; "
escape-char =/ %x5c             ; \
escape-char =/ %x62             ; b
escape-char =/ %x66             ; f
escape-char =/ %x6e             ; n
escape-char =/ %x72             ; r
escape-char =/ %x74             ; t
escape-char =/ %x76             ; v

; Vectors
; -------

vector = vector-start ws [ value ws ] *( [ comment ] newline ws [ value ws ] ) vector-end
vector-start = %x5b             ; [
vector-end = %x5d               ; ]

; Maps
; ----

map = map-start ws [ key-value ws ] *( [ comment ] newline ws [ key-value ws ] ) map-end
map-start = %x7b                ; {
map-end = %x7d                  ; }
